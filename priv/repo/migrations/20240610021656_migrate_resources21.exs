defmodule Animina.Repo.Migrations.MigrateResources21 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:potential_partners, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :is_active, :boolean, null: false, default: true
      add :position, :bigserial, null: false

      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :user_id,
          references(:users,
            column: :id,
            name: "potential_partners_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :potential_partner_id,
          references(:users,
            column: :id,
            name: "potential_partners_potential_partner_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:potential_partners, [:user_id, :potential_partner_id])

    create index(:potential_partners, [:user_id])

    create unique_index(:potential_partners, [:user_id, :potential_partner_id],
             name: "potential_partners_unique_potential_partner_index"
           )
  end

  def down do
    drop constraint(:potential_partners, "potential_partners_user_id_fkey")

    drop constraint(:potential_partners, "potential_partners_potential_partner_id_fkey")

    drop_if_exists unique_index(:potential_partners, [:user_id, :potential_partner_id],
                     name: "potential_partners_unique_potential_partner_index"
                   )

    drop_if_exists index(:potential_partners, [:user_id])

    drop_if_exists index(:potential_partners, [:user_id, :potential_partner_id])

    drop table(:potential_partners)
  end
end

name: Update Patch Version

on:
  schedule:
    - cron: '0 12 * * *'  # This means the script will run every day at 12:00 PM UTC
  workflow_dispatch:  # Optional, allows manual triggering of the workflow

jobs:
  update-patch-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

    - name: Check for changes since last run
      id: changes
      run: |
        # Fetch all branches and tags to ensure we have a complete history
        git fetch --all
        # Get the latest commit hash from 24 hours ago
        since_commit=$(git rev-list -n 1 --before="24 hours ago" origin/main)
        echo "Commit from 24 hours ago: $since_commit"
        # Check if there are changes since then
        if [ -z "$since_commit" ]; then
          echo "No commit found from 24 hours ago. Assuming changes."
          echo "no_changes=false" >> $GITHUB_ENV
        elif git diff --quiet $since_commit..HEAD; then
          echo "No changes since last run"
          echo "no_changes=true" >> $GITHUB_ENV
        else
          echo "Changes detected"
          echo "no_changes=false" >> $GITHUB_ENV

    - name: Debug check changes
      run: |
        git log --since="24 hours ago"
        git status

    - name: Update patch version
      if: env.no_changes == 'false'
      run: |
        # Extract the current version
        current_version=$(grep 'version:' mix.exs | sed -E "s/.*version: \"([0-9]+\.[0-9]+\.[0-9]+)\".*/\1/")
        echo "Current version: $current_version"
        IFS='.' read -ra ADDR <<< "$current_version"
        patch=${ADDR[2]}
        new_patch=$((patch + 1))
        new_version="${ADDR[0]}.${ADDR[1]}.$new_patch"
        echo "New version: $new_version"

        # Update the mix.exs file
        sed -i "s/$current_version/$new_version/" mix.exs

        # Verify the update
        grep 'version:' mix.exs

        # Commit the changes
        git add mix.exs
        git commit -m "Bump patch version to $new_version"

    - name: Push changes
      if: env.no_changes == 'false'
      env:
        GH_TOKEN: ${{ secrets.VERSION_NUMBER_BUMP_GH_TOKEN }}
      run: |
        git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git HEAD:main
